var util = require('util'),
    _ = require('underscore'),
    request	= require('request'),
    crypto = require('crypto'),
    VError = require('verror'),
    clc = require('cli-color'),
    md5 = require('md5');

var BitMEX = function BitMEX(api_key, secret, server, timeout)
{
    this.api_key = api_key;
    this.secret = secret;

    // Use this for the Live Site (Production)
    // this.server = server || 'https://bitmex.com:443';
    
    // Use This for testnet.bitmex.com (Development)
    this.server = server || 'https://testnet.bitmex.com:443';

    this.timeout = timeout || 20000;
};

var headers = {"User-Agent": "BitMEX Javascript API Client"};

/**
 * Custom Request Types: These functions call a 'privateRequest' function with 
 * a custom VERB depending on what action is being taken. 
 */
 
BitMEX.prototype.getRequest = function(method, params, callback)
{
    this.privateRequest(method, params, callback, 'GET');
};

BitMEX.prototype.postRequest = function(method, params, callback)
{
    this.privateRequest(method, params, callback, 'POST');
};

BitMEX.prototype.putRequest = function(method, params, callback)
{
    this.privateRequest(method, params, callback, 'PUT');
};

BitMEX.prototype.deleteRequest = function(method, params, callback) 
{
    this.privateRequest(method, params, callback, 'DELETE');
};
    
/**
 * Private Requests have a signature generated for the request and send 
 * custom @headers. 
 */
BitMEX.prototype.privateRequest = function(method, params, callback, verb)
{
    var functionName = 'BitMEX.getRequest()',
        self = this;

    if(!this.api_key || !this.secret)
    {
        var error = new VError('%s must provide api_key and secret to make this API request.', functionName);
        return callback(error);
    }

    if(!_.isObject(params))
    {
        var error = new VError('%s second parameter %s must be an object. If no params then pass an empty object {}', functionName, params);
        return callback(error);
    }

    if (!callback || typeof(callback) != 'function')
    {
        var error = new VError('%s third parameter needs to be a callback function', functionName);
        return callback(error);
    }

    var nonce = new Date().valueOf();
    var reqUrl = '/api/v1/' + method + '';  
    
    headers = {
        "User-Agent": "BitMEX NodeJS API Client",
        "api-nonce": nonce,
        "api-key": this.api_key,
        "api-signature": this.signMessage(verb, reqUrl, nonce, params)
    };

    
    var options = {
        url: this.server + '/api/v1/' + method + '',
        method: verb,
        headers: headers,
        form: params
    };
    
    var requestDesc = util.format('%s request to url %s with method %s and params %s',
        options.method, options.url, method, JSON.stringify(params));
            
    executeRequest(options, requestDesc, callback);
};

/**
 * This method returns a signature for a request as a SHA256 string encoded with the secret.
 * @param  {Object}  params   The object to encode
 * @return {String}           The request signature
 */

// Copying Example
BitMEX.prototype.signMessage = function signMessage(verb, url, nonce, data) {
    if (!data || _.isEmpty(data)) data = '';
    else if(_.isObject(data)) data = formatParameters(data);
        
    return crypto.createHmac('sha256', this.secret).update(verb + url + nonce + data).digest('hex');
};

function formatParameters(params)
{
    var str = [];
    for(var p in params) {
        if(params.hasOwnProperty(p)) {
            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(params[p]));
        }
    }
    var formattedParams = str.join('&');
    
    return formattedParams;
}


/**
 * executeRequest() - This function actually takes care of sending the request.
 */

function executeRequest(options, requestDesc, callback)
{
    var functionName = 'BitMEX.executeRequest()';

    request(options, function(err, response, data)
    {
        var error = null,   // default to no errors
            returnObject = data;

        if(err)
        {
            error = new VError(err, '%s failed %s', functionName, requestDesc);
            error.name = err.code;
        }
        else if (response.statusCode < 200 || response.statusCode >= 300)
        {
            error = new VError('%s HTTP status code %s returned from %s', functionName,
                response.statusCode, requestDesc);
            error.name = response.statusCode;
        }
        else if (options.form)
        {
            try {
                returnObject = JSON.parse(data);
            }
            catch(e) {
                error = new VError(e, 'Could not parse response from server: ' + data);
            }
        }
        // if json request was not able to parse json response into an object
        else if (options.json && !_.isObject(data) )
        {
            error = new VError('%s could not parse response from %s\nResponse: %s', functionName, requestDesc, data);
        }

        if (_.has(returnObject, 'error_code'))
        {
            var errorMessage = mapErrorMessage(returnObject.error_code);

            error = new VError('%s %s returned error code %s, message: "%s"', functionName,
                requestDesc, returnObject.error_code, errorMessage);

            error.name = returnObject.error_code;
        }

        callback(error, returnObject);
    });
}
 
// API KEY Functions
/**
 * This Method Creates an API Key For A User
 * @param  Function     callback   Callback Function
 * @param  String       name       API Key Name (Reference Only)
 * @param  String       cidr       CIDR Block to Restrict Address
 * @param  boolean      enabled    Set true to enable key, false otherwise.
 */
BitMEX.prototype.createAPIKey = function createAPIKey(callback, name, cidr, enabled)
{
    var params = {};
    if(name) params.name = name;
    if(cidr) params.cidr = cidr;
    if(enabled) params.enabled = enabled;
    
    this.postRequest('apiKey', params, callback);
};

/**
 * This Method Gets The User's API Keys
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getAPIKeys = function getAPIKeys(callback) 
{
    var params = {};
    
    this.getRequest('apiKey', params, callback);
};

/**
 * This Method Removes an API Key
 * @param  Function     callback   Callback Function
 * @param  String       apiKeyID   API Key ID
 */
BitMEX.prototype.removeAPIKey = function removeAPIKey(callback, apiKeyID) 
{
    var params = {};

    if(apiKeyID) params.apiKeyID = apiKeyID;
    
    this.deleteRequest('apiKey', params, callback);
};

/**
 * This Method Disables an API Key
 * @param  Function     callback   Callback Function
 * @param  String       apiKeyID   API KEY ID
 */
BitMEX.prototype.disableAPIKey = function disableAPIKey(callback, apiKeyID) 
{
    var params = {};
    
    if(apiKeyID) params.apiKeyID = apiKeyID;
    
    this.postRequest('apiKey/disable', params, callback);
};

/**
 * This Method Enables an API Key
 * @param  Function     callback   Callback Function
 * @param  String       apiKeyID   API KEY ID
 */
BitMEX.prototype.enableAPIKey = function enableAPIKey(callback, apiKeyID) 
{
    var params = {};
    
    if(apiKeyID) params.apiKeyID = apiKeyID;
    
    this.postRequest('apiKey/enable', params, callback);
};


// Chat Functions 
/**
 * This Method Gets Chat Messages from the Server
 * @param  Function     callback   Callback Function
 * @param  Number       count      Number of Messages to Return
 * @param  Number       start      Starting point for results.
 * @param  Boolean      reverse    If true will sort newest first.
 */
BitMEX.prototype.getChatMessages = function getChatMessages(callback, count, start, reverse)
{
    var params = {};
    
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    
    this.getRequest('chat', params, callback);
};

/**
 * This Method Sends a Chat Message to the Server.
 * @param  Function     callback   Callback Function
 * @param  String       message    Message user wants to send.
 */
BitMEX.prototype.sendChatMessage = function sendChatMessage(callback, message)
{
    var params = {};
    
    if(message) params.message = message;
    
    this.postRequest('chat', params, callback);
};

/**
 * This Method Gets a List of Users Connected to Chat.
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getConnectedUsers = function getConnectedUsers(callback)
{
    var params = {};
    
    this.getRequest('chat/connected', params, callback);
};


// Execution Functions
/**
 * This Method Gets Execution History.
 * @param  Function         callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getExecution = function getExecution(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('execution', params, callback);
};

/**
 * This method gets the user's trade history.
 * @param  Function         callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getExecutionTradeHistory = function getExecutionTradeHistory(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('execution/tradeHistory', params, callback);
};


// Instrument Functions
/**
 * This method returns all instruments and indices.
 * @param  Function         callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getInstruments = function getInstruments(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {}; 
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('instrument', params, callback);
};

/**
 * This method returns active indices (open, or closed < 24 hours ago)
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getActiveInstruments = function getActiveInstruments(callback) 
{
    var params = {};    
      
    this.getRequest('instrument/active', params, callback);
};

/**
 * Helper Method.
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getActiveInstrumentsAndIndices = function getActiveInstrumentsAndIndices(callback)
{
    var params = {};
        
    this.getRequest('instrument/activeAndIndices', params, callback);
};

/**
 * This Helps determine which pairs are live.
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getActiveIntervals = function getActiveIntervals(callback)
{
    var params = {};
    
    this.getRequest('instrument/activeIntervals', params, callback);
};

/**
 * This method returns all price indices.
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getIndices = function getIndices(callback) 
{
    var params = {};
    
    this.getRequest('instrument/indices', params, callback);
};


// Order Functions
/**
 * This method returns a list of orders.
 * @param  Function         callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getOrders = function getOrders(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
        
    this.getRequest('order', params, callback);
};

/**
 * This method creates an order.
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Symbol the order is for.
 * @param  Number       quantity   Number of Contracts (Positive to buy, negative to sell)
 * @param  Number       price      Order Price
 * @param  Boolean      ioc        Set to true to place an immediateOrCancel order.
 * @param  String       type       Order Type: ['limit' or 'stopLimit']
 * @param  Number       stopPrice  If the order type is stopLimit then this is the trigger/stop price.
 * @param  String       clOrdID    Option Client Order ID to give this Order. The ID will be returned on any execution messages.
 */
BitMEX.prototype.createOrder = function createOrder(callback, symbol, quantity, price, ioc, type, stopPrice, clOrdID) 
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(quantity) params.quantity = quantity;
    if(price) params.price = price;
    if(ioc) params.ioc = ioc;
    if(type) params.type = type;
    if(stopPrice) params.stopPrice = stopPrice;
    if(clOrdID) params.clOrdID = clOrdID;
    
    this.postRequest('order', params, callback);
};

/**
 * This method cancel's an order.
 * @param  Function         callback   Callback Function
 * @param  array['string']  orderID    Order ID's
 * @param  array['string']  clOrdID    Client Order ID's.
 * @param  String           text       Optional Cancellation annotation.
 */
BitMEX.prototype.cancelOrder = function cancelOrder(callback, orderID, clOrdID, text)
{
    var params = {};
    
    if(orderID) params.orderID = orderID;
    if(clOrdID) params.clOrdID = clOrdID;
    if(text) params.text = text;
    
    this.deleteRequest('order', params, callback);
};

/**
 * This method cancells all orders matching a filter.
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Orders on which symbol should be cancelled.
 * @param  Object       filter     Filter for cancellation, eg: {"side": "BUY"}.
 * @param  String       text       Optional cancellation annotation.
 */
BitMEX.prototype.cancelAllOrders = function cancelAllOrders(callback, symbol, filter, text)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(text) params.text = text;
        
    this.deleteRequest('order/all', params, callback);
};

/**
 * This method cancels all orders after 'timeout' milliseconds.
 * @param  Function     callback   Callback Function
 * @param  String       timeout    Number of Milliseconds to Cancel Orders After.
 */
BitMEX.prototype.cancelAllOrdersAfter = function cancelAllOrdersAfter(callback, timeout) 
{
    var params = {};
    
    if(timeout) params.timeout = timeout;
    
    this.postRequest('order/cancelAllAfter', params, callback);
};

/**
 * Closes a position using market orders.
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Symbol on which to close Position.
 */
BitMEX.prototype.closePosition = function closePosition(callback, symbol)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    
    this.postRequest('order/closePosition', params, callback);
};


// OrderBook Functions
/**
 * This method gets the orderbook for a given symbol / depth.
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Which symbol we are looking at.
 * @param  Number       depth      Orderbook Depth.
 */
BitMEX.prototype.getOrderBook = function getOrderBook(callback, symbol, depth) 
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(depth) params.depth = depth;
        
    this.getRequest('orderBook', params, callback);
};


// Position Functions
/**
 * Method Description
 * @param  Function         callback   Callback Function
 * @param  Object           filter     Filter positions by this.
 * @param  array['string']  columns    Selects which columns to return.
 * @param  Number           count      The number of results to return.
 */
BitMEX.prototype.getPositions = function getPositions(callback, filter, columns, count)
{
    var params = {};
    
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
        
    this.getRequest('position', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Position symbol to isolate.
 * @param  Boolean      enabled    If true, will enable cross-margin.
 */
BitMEX.prototype.isolatePositionMargin = function isolatePositionMargin(callback, symbol, enabled) 
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(enabled) params.enabled = enabled;
    
    this.postRequest('position/isolate', params, callback);
};


// Quote Functions
/**
 * Method Description
 * @param  Function         callback   Callback Function
 * @param  String           binSize    Time interval to bucket by ['30s', '1m', '5m', '1h', '1d']           
 * @param  String           symbol     Symbol to look at (eg: XBU).
 * @Param  Object           filter     Generic Table Filter. 
 * @param  array['string']  columns    Array of columns to fetch.
 * @param  number           count      Number of results to fetch.
 * @param  number           start      Starting point for results.
 * @param  boolean          reverse    If true will sort results newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending date filter for results.
 */
BitMEX.prototype.getBucketedQuotes = function getBucketedQuotes(callback, binSize, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(binSize) params.binSize = binSize;
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
        
    this.getRequest('quote/bucketed', params, callback);
};


// Schema Functions
/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       model      Optional Model Filter.
 */
BitMEX.prototype.getModelSchema = function getModelSchema(callback, model) 
{
    var params = {};
    
    if(model) params.model = model;
  
    this.getRequest('schema', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getSchemaWebsocketHelp = function getSchemaWebsocketHelp(callback)
{
    var params = {};
       
    this.getRequest('schema/websocketHelp', params, callback);
};


// Settlement Functions
/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getSettlementHistory = function getSettlementHistory(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
        
    this.getRequest('settlement', params, callback);
};


// Stats Functions
/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getStats = function getStats(callback) 
{
    var params = {};

    this.getRequest('stats', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getStatsHistory = function getStatsHistory(callback)
{
    var params = {};
    
    this.getRequest('stats/history', params, callback);
};

// Trade Functions
/**
 * Method Description
 * @param  Function         callback   Callback Function
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getTrades = function getTrades(callback, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse; 
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('trade', params, callback);
};

/**
 * Method Description
 * @param  Function         callback   Callback Function
 * @param  String           binSize    Time interval to bucket by. Available options: ['30s', '1m', '5m', '1h', '1d'].
 * @param  String           symbol     Instrument Symbol
 * @param  Object           filter     Generic Filter (JSON pair)
 * @param  Array[string]    columns    Filter Selected Columns
 * @param  number           count      Number of Results to Fetch.
 * @param  number           start      Starting point for Results
 * @param  boolean          reverse    If true will sort Newest first.
 * @param  string           startTime  Starting date filter for results.
 * @param  string           endTime    Ending Date Filter for results.
 */
BitMEX.prototype.getBucketedTrades = function getBucketedTrades(callback, binSize, symbol, filter, columns, count, start, reverse, startTime, endTime)
{
    var params = {};
    
    if(binSize) params.binSize = binSize;
    if(symbol) params.symbol = symbol;
    if(filter) params.filter = filter;
    if(columns) params.columns = columns;
    if(count) params.count = count;
    if(start) params.start = start;
    if(reverse) params.reverse = reverse;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('trade/bucketed', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Which symbol we want to return.
 * @param  String       startTime  First date we want to look at.
 * @param  String       endTime     Last date we want to look at.
 */
BitMEX.prototype.getTradesByDate = function getTradesByDate(callback, symbol, startTime, endTime) 
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(startTime) params.startTime = startTime;
    if(endTime) params.endTime = endTime;
    
    this.getRequest('trade/byDate', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       symbol     Which symbol we want to return.
 * @param  Number       count      How many results we want to return.
 */
BitMEX.prototype.getRecentTrades = function getRecentTrades(callback, symbol, count)
{
    var params = {};
    
    if(symbol) params.symbol = symbol;
    if(count) params.count = count;
    
    this.getRequest('trade/recent', params, callback);
};


// User Functions
/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       email      New User's Email
 * @param  String       password    New User's Password
 * @param  String       username    New User's Username
 * @param  String       firstname   New User's First Name
 * @param  String       lastnamne   New User's Last Name
 * @param  String       accountType 'Trader' or 'Hedger'
 * @param  Boolean      acceptsTOS  True to indicate acceptance of terms.
 * @param  String       referrerID  Optional Referrer ID.
 */
BitMEX.prototype.registerNewUser = function registerNewUser(callback, email, password, username, firstname, lastname, accountType, acceptsTOS, referrerID)
{
    var params = {};
    
    if(email) params.email = email;
    if(password) params.password = password;
    if(username) params.username = username;
    if(firstname) params.firstname = firstname;
    if(lastname) params.lastname = lastname;
    if(accountType) params.accountType = accountType;
    if(acceptsTOS) params.acceptsTOS = acceptsTOS;
    if(referrerID) params.referrerID = referrerID;
    
    this.postRequest('user', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       firstname   new firstname of the user.
 * @param  String       lastname    new lastname of the user.
 * @param  String       oldPassword the user's original password.
 * @param  String       newPassword the user's new password.
 * @param  String       newPasswordConfirm  -  see above.
 * @param  String       accountType ['Trader' or 'Hedger'].
 * @param  String       pgpPubKey   PGP Public Key. If specified automated emails will use this key.
 */
BitMEX.prototype.updateUser = function updateUser(callback, firstname, lastname, oldPassword, newPassword, newPasswordConfirm, accountType, pgpPubKey)
{
    var params = {};
    
    if(firstname) params.firstname = firstname;
    if(lastname) params.lastname = lastname;
    if(oldPassword) params.oldPassword = oldPassword;
    if(newPassword) params.newPassword = newPassword;
    if(newPasswordConfirm) params.newPasswordConfirm = newPasswordConfirm;
    if(accountType) params.accountType = accountType;
    if(pgpPubKey) params.pgpPubKey = pgpPubKey;
    
    this.putRequest('user', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getUserModel = function getUserModel(callback)
{
    var params = {};
        
    
    this.getRequest('user', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getUserAffiliateStatus = function getUserAffiliateStatus(callback)
{
    var params = {};
    
    this.getRequest('user/affiliateStatus', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       token       
 */
BitMEX.prototype.cancelWithdrawal = function cancelWithdrawal(callback, token) 
{
    var params = {};
    
    if(token) params.token = token;
    
    this.postRequest('user/cancelWithdrawal', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       referralCode Referral Code to Check.
 */
BitMEX.prototype.checkReferralCode = function checkReferralCode(callback, referralCode)
{
    var params = {};
    
    if(referralCode) params.referralCode = referralCode;
    
    this.getRequest('user/checkReferralCode', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getUserCommission = function getUserCommission(callback)
{
    var params = {};
            
    this.getRequest('user/commission', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       token      
 */
BitMEX.prototype.confirmEmail = function confirmEmail(callback, token)
{
    var params = {};
    
    if(token) params.token = token;
    
    this.postRequest('user/confirmEmail', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       type       'GA' (Google Authenticator)
 * @param  String       token       Token from your selected TFA type.
 */
BitMEX.prototype.confirmEnableTFA = function confirmEnableTFA(callback, type, token) 
{
    var params = {};
    
    if(type) params.type = type;
    if(token) params.token = token;
    
    this.postRequest('user/confirmEnableTFA', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       email      Where email will get sent. 
 * @param  String       token      
 * @param  String       newPassword What the user's new password is.
 */
BitMEX.prototype.confirmPasswordReset = function confirmPasswordReset(callback, email, token, newPassword)
{
    var params = {};
    
    if(email) params.email = email;
    if(token) params.token = token;
    if(newPassword) params.newPassword = newPassword;
    
    this.postRequest('user/confirmPasswordReset', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       token
 */
BitMEX.prototype.confirmWithdrawal = function confirmWithdrawal(callback, token)
{
    var params = {};
    
    if(token) params.token = token;
    
    this.postRequest('user/confirmWithdrawal', params, callback);
};
 
/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       currency   XBT, XLT, ETH, etc. 
 */
BitMEX.prototype.getDepositAddress = function getDepositAddress(callback, currency)
{
    var params = {};
    
    if(currency) params.currency = currency;
    
    this.getRequest('user/depositAddress', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       email      email address of the user account.
 * @param  String       password   password belonging to user.
 * @param  String       token      token from TFA.      
 */
BitMEX.prototype.userLogin = function userLogin(callback, email, password, token) 
{
    var params = {};
    
    if(email) params.email = email;
    if(password) params.password = password;
    if(token) params.token = token;
    
    this.postRequest('user/login', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.userLogout = function userLogout(callback)
{
    var params = {};
    
    this.postRequest('user/logout', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.userLogoutAll = function userLogoutAll(callback) 
{
    var params = {};
    
    this.postRequest('user/logoutAll', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getUserMargin = function getUserMargin(callback) 
{
    var params = {};
    
    this.getRequest('user/margin', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  Object       prefs      Preferences to save.
 */
BitMEX.prototype.savePreferences = function savePreferences(callback, prefs)
{
    var params = {};
    
    if(prefs) params.prefs = prefs;
    
    this.postRequest('user/preferences', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       type        Type of TFA to enable. ('GA' => Google Authenticator')
 */
BitMEX.prototype.requestEnableTFA = function requestEnableTFA(callback, type)
{
    var params = {};
    
    if(type) params.type = type;
    
    this.postRequest('user/requestEnableTFA', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       email      Email belonging to user who wants their password reset.
 */
BitMEX.prototype.requestPasswordReset = function requestPasswordReset(callback, email)
{
    var params = {};
    
    if(email) params.email = email;
    
    this.postRequest('user/requestPasswordReset', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       otpToken    2FA token. Required if 2FA is enabled on account.
 * @param  String       currency    Currency you are withdrawing.
 * @param  Number       amount      Amount of withdrawal currency. (note that standard 0.0001 fee applies).
 * @param  String       address     Destination Address for Withdrawal.
 */
BitMEX.prototype.requestWithdrawal = function requestWithdrawal(callback, otpToken, currency, amount, address)
{
    var params = {};
    
    if(otpToken) params.otpToken = otpToken;
    if(currency) params.currency = currency;
    if(amount) params.amount = amount;
    if(address) params.address = address;
    
    this.postRequest('user/requestWithdrawal', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 * @param  String       email       Email belonging to user. 
 */
BitMEX.prototype.resendVerificationEmail = function resendVerificationEmail(callback, email)
{
    var params = {};
    
    if(email) params.email = email;
    
    this.getRequest('user/resendVerificationEmail', params, callback);
};

/**
 * Method Description
 * @param  Function     callback   Callback Function
 */
BitMEX.prototype.getWalletHistory = function getWalletHistory(callback)
{
    var params = {};
    
    this.getRequest('user/walletHistory', params, callback);
};

module.exports = BitMEX;