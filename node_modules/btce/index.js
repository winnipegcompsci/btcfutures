var util = require('util'),
    _ = require('underscore'),
    request	= require('request'),
    crypto = require('crypto'),
    VError = require('verror'),
    md5 = require('MD5');

var BTCe = function BTCe(api_key, secret, server, timeout)
{
    this.api_key = api_key;
    this.secret = secret;

    this.server = server || 'https://btc-e.com';

    this.timeout = timeout || 20000;
};

var headers = {"User-Agent": "BTCe Javascript API Client"};

BTCe.prototype.privateRequest = function(method, params, callback)
{
    var functionName = 'BTCe.privateRequest()',
        self = this;

    if(!this.api_key || !this.secret)
    {
        var error = new VError('%s must provide api_key and secret to make this API request.', functionName);
        return callback(error);
    }

    if(!_.isObject(params))
    {
        var error = new VError('%s second parameter %s must be an object. If no params then pass an empty object {}', functionName, params);
        return callback(error);
    }

    if (!callback || typeof(callback) != 'function')
    {
        var error = new VError('%s third parameter needs to be a callback function', functionName);
        return callback(error);
    }

    params.api_key = this.api_key;
    params.sign = this.signMessage(params);

    var options = {
        url: this.server + '/tapi',
        method: 'POST',
        headers: headers,
        form: params
    };

    var requestDesc = util.format('%s request to url %s with method %s and params %s',
        options.method, options.url, method, JSON.stringify(params));

    executeRequest(options, requestDesc, callback);
};

/**
 * This method returns a signature for a request as a md5-encoded uppercase string
 * @param  {Object}  params   The object to encode
 * @return {String}           The request signature
 */
BTCe.prototype.signMessage = function getMessageSignature(params)
{
    var formattedParams = formatParameters(params);

    // append secret key value pair
    formattedParams += '&secret_key=' + this.secret;

    return md5(formattedParams).toUpperCase();
};

/**
 * This method returns the parameters as key=value pairs separated by & sorted by the key
 * @param  {Object}  params   The object to encode
 * @return {String}           formatted parameters
 */
function formatParameters(params)
{
    var sortedKeys = [],
        formattedParams = '';

    // sort the properties of the parameters
    sortedKeys = _.keys(params).sort();

    // create a string of key value pairs separated by '&' with '=' assignement
    for (i = 0; i < sortedKeys.length; i++)
    {
        if (i != 0) {
            formattedParams += '&';
        }
        formattedParams += sortedKeys[i] + '=' + params[sortedKeys[i]];
    }

    return formattedParams;
}

BTCe.prototype.publicRequest = function(method, params, callback)
{
    var functionName = 'BTCe.publicRequest()';

    if(!_.isObject(params))
    {
        var error = new VError('%s second parameter %s must be an object. If no params then pass an empty object {}', functionName, params);
        return callback(error);
    }

    if (!callback || typeof(callback) != 'function')
    {
        var error = new VError('%s third parameter needs to be a callback function with err and data parameters', functionName);
        return callback(error);
    }

    var url = this.server + '/api/3/' + method + '';

    var options = {
        url: url,
        method: 'GET',
        headers: headers,
        timeout: this.timeout,
        qs: params,
        json: {}        // request will parse the json response into an object
    };

    var requestDesc = util.format('%s request to url %s with parameters %s',
        options.method, options.url, JSON.stringify(params));

    executeRequest(options, requestDesc, callback)
};

function executeRequest(options, requestDesc, callback)
{
    var functionName = 'BTCe.executeRequest()';

    request(options, function(err, response, data)
    {
        var error = null,   // default to no errors
            returnObject = data;

        if(err)
        {
            error = new VError(err, '%s failed %s', functionName, requestDesc);
            error.name = err.code;
        }
        else if (response.statusCode < 200 || response.statusCode >= 300)
        {
            error = new VError('%s HTTP status code %s returned from %s', functionName,
                response.statusCode, requestDesc);
            error.name = response.statusCode;
        }
        else if (options.form)
        {
            try {
                returnObject = JSON.parse(data);
            }
            catch(e) {
                error = new VError(e, 'Could not parse response from server: ' + data);
            }
        }
        // if json request was not able to parse json response into an object
        else if (options.json && !_.isObject(data) )
        {
            error = new VError('%s could not parse response from %s\nResponse: %s', functionName, requestDesc, data);
        }

        if (_.has(returnObject, 'error_code'))
        {
            var errorMessage = mapErrorMessage(returnObject.error_code);

            error = new VError('%s %s returned error code %s, message: "%s"', functionName,
                requestDesc, returnObject.error_code, errorMessage);

            error.name = returnObject.error_code;
        }

        callback(error, returnObject);
    });
}

//
// Public Functions
//

BTCe.prototype.getTicker = function getTicker(callback)
{
    this.publicRequest('ticker/btc_usd', {}, callback);
};

BTCe.prototype.getInfo = function getInfo(callback) 
{
    this.publicRequest('info', {}, callback);
};

BTCe.prototype.getDepth = function getDepth(callback, limit)
{
    var params = {};
    if (limit) params.limit = limit;
    
    this.publicRequest('depth/btc_usd', params, callback);
};

BTCe.prototype.getTrades = function getTrades(callback, limit) 
{
    var params = {};
    
    if (limit) params.limit = limit;
    
    this.publicRequest('trades/btc_usd', params, callback);
}

//
// Private Functions
//

BTCe.prototype.getUserInfo = function getUserInfo(callback)
{
    var params = {};
    params.method = 'getInfo';
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.makeTrade = function makeTrade(callback, pair, type, rate, amount)
{
    var params = {};
    params.method = 'Trade';
    if(pair) params.pair = pair;
    if(type) params.type = type;
    if(rate) params.rate = rate;
    if(amount) params.amount = amount;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.getActiveOrders = function getActiveOrders(callback, pair)
{
    var params = {};
    params.method = 'ActiveOrders';
    
    if(pair) params.pair = pair;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.getOrderInfo = function getOrderInfo(callback, order_id) 
{
    var params = {};
    params.method = 'OrderInfo';
    
    if(order_id) params.order_id = order_id;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.cancelOrder = function cancelOrder(callback, order_id) 
{
    var params = {};
    params.method = 'CancelOrder';
    
    if(order_id) params.order_id = order_id;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.getTradeHistory = function getTradeHistory(callback, from, count, from_id, end_id, order, since, end, pair)
{
   var params = {};
   params.method = 'TradeHistory';
   
   if(from) params.from = from;
   if(count) params.count = count;
   if(from_id) params.from_id = from_id;
   if(end_id) params.end_id = end_id;
   if(order) params.order = order;
   if(since) params.since = since;
   if(end) params.end = end;
   if(pair) params.pair = pair;
   
   this.privateRequest('', params, callback);
}

BTCe.prototype.getTransHistory = function getTransHistory(callback, from, count, from_id, end_id, order, since, end)
{
   var params = {}; 
   params.method = 'TransHistory';
   
   if(from) params.from = from;
   if(count) params.count = count;
   if(from_id) params.from_id = from_id;
   if(end_id) params.end_id = end_id;
   if(order) params.order = order;
   if(since) params.since = since;
   if(end) params.end = end;
   
   this.privateRequest('', params, callback);
};

BTCe.prototype.withdrawCoins = function withdrawCoins(callback, coinName, amount, address)
{
    var params = {};
    params.method = 'WithdrawCoin';
    
    if(coinName) params.coinName = coinName;
    if(amount) params.amount = amount;
    if(address) params.address = address;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.createCoupon = function createCoupon(callback, currency, amount) 
{
    var params = {};
    params.method = 'CreateCoupon';
    
    if(currency) params.currency = currency;
    if(amount) params.amount = amount;
    
    this.privateRequest('', params, callback);
};

BTCe.prototype.redeemCoupon = function redeemCoupon(callback, coupon) 
{
    var params = {};
    params.method = 'RedeemCoupon';
    
    if(coupon) params.coupon = coupon;
    
    this.privateRequest('', params, callback);
};

module.exports = BTCe;