var util = require('util'),
    _ = require('underscore'),
    request	= require('request'),
    crypto = require('crypto'),
    VError = require('verror'),
    md5 = require('MD5');
    
var Futures796 = function Futures796(api_key, secret, server, timeout)
{
    this.api_key = api_key;
    this.secret = secret;

    this.server = server || '';

    this.timeout = timeout || 20000;
};

var headers = {"User-Agent": "Futures796 Javascript API Client"};

Futures796.prototype.privateRequest = function(method, params, callback)
{
    var functionName = 'Futures796.privateRequest()',
        self = this;

    if(!this.api_key || !this.secret)
    {
        var error = new VError('%s must provide api_key and secret to make this API request.', functionName);
        return callback(error);
    }

    if(!_.isObject(params))
    {
        var error = new VError('%s second parameter %s must be an object. If no params then pass an empty object {}', functionName, params);
        return callback(error);
    }

    if (!callback || typeof(callback) != 'function')
    {
        var error = new VError('%s third parameter needs to be a callback function', functionName);
        return callback(error);
    }

    params.appid = "11378";
    params.timestamp = new Date().getTime();
    params.secretkey = this.secret;
    params.apikey = this.api_key;
    params.sign = this.signMessage(params, this.secret);
    
    var options = {
        url: this.server + method,
        method: 'POST',
        headers: headers,
        form: params
    };

    var requestDesc = util.format('%s request to url %s with method %s and params %s',
        options.method, options.url, method, JSON.stringify(params));

    executeRequest(options, requestDesc, callback);
};

/**
 * This method returns a signature for a request as a hmac(sha)
 * @param  {Object}  params   The object to encode
 * @return {String}           The request signature
 */
Futures796.prototype.signMessage = function getMessageSignature(params, secret)
{
    var formattedParams = formatParameters(params);

    // append secret key value pair
    var hmac = crypto.createHmac('sha1', secret);
    hmac.write(formattedParams);  
        
    hmac.end();
   
    var result = hmac.read();
    result = new Buffer(result).toString('base64');
      
    return result;
};

/**
 * This method returns the parameters as key=value pairs separated by & sorted by the key
 * @param  {Object}  params   The object to encode
 * @return {String}           formatted parameters
 */
function formatParameters(params)
{
    var sortedKeys = [],
        formattedParams = '';

    // sort the properties of the parameters
    sortedKeys = _.keys(params).sort();

    // create a string of key value pairs separated by '&' with '=' assignement
    for (i = 0; i < sortedKeys.length; i++)
    {
        if (i != 0) {
            formattedParams += '&';
        }
        formattedParams += sortedKeys[i] + '=' + params[sortedKeys[i]];
    }

    return formattedParams;
}

Futures796.prototype.publicRequest = function(method, params, callback)
{
    var functionName = 'Futures796.publicRequest()';

    if(!_.isObject(params))
    {
        var error = new VError('%s second parameter %s must be an object. If no params then pass an empty object {}', functionName, params);
        return callback(error);
    }

    if (!callback || typeof(callback) != 'function')
    {
        var error = new VError('%s third parameter needs to be a callback function with err and data parameters', functionName);
        return callback(error);
    }

    var url = this.server + method;

    var options = {
        url: url,
        method: 'GET',
        headers: headers,
        timeout: this.timeout,
        qs: params,
        json: {}        // request will parse the json response into an object
    };

    var requestDesc = util.format('%s request to url %s with parameters %s',
        options.method, options.url, JSON.stringify(params));

    executeRequest(options, requestDesc, callback)
};

function executeRequest(options, requestDesc, callback)
{
    var functionName = 'Futures796.executeRequest()';

    request(options, function(err, response, data)
    {
        var error = null,   // default to no errors
            returnObject = data;

        if(err)
        {
            error = new VError(err, '%s failed %s', functionName, requestDesc);
            error.name = err.code;
        }
        else if (response.statusCode < 200 || response.statusCode >= 300)
        {
            error = new VError('%s HTTP status code %s returned from %s', functionName,
                response.statusCode, requestDesc);
            error.name = response.statusCode;
        }
        else if (options.form)
        {
            try {
                returnObject = JSON.parse(data);
            }
            catch(e) {
                error = new VError(e, 'Could not parse response from server: ' + data);
            }
        }
        // if json request was not able to parse json response into an object
        else if (options.json && !_.isObject(data) )
        {
            error = new VError('%s could not parse response from %s\nResponse: %s', functionName, requestDesc, data);
        }

        if (_.has(returnObject, 'error_code'))
        {
            var errorMessage = mapErrorMessage(returnObject.error_code);

            error = new VError('%s %s returned error code %s, message: "%s"', functionName,
                requestDesc, returnObject.error_code, errorMessage);

            error.name = returnObject.error_code;
        }

        callback(error, returnObject);
    });
}

//
// Public Functions 
//

Futures796.prototype.getTicker = function getTicker(callback) 
{
    this.publicRequest('http://api.796.com/v3/futures/ticker.html?type=weekly', {}, callback);
};

Futures796.prototype.getDepth = function getDepth(callback) 
{
    this.publicRequest('http://api.796.com/v3/futures/depth.html?type=weekly', {}, callback);
}

Futures796.prototype.getTrades = function getTrades(callback) 
{
    this.publicRequest('http://api.796.com/v3/futures/trades.html?type=weekly', {}, callback);
};

Futures796.prototype.getSettlements = function getSettlements(callback) 
{
    this.publicRequest('http://api.796.com/v3/futures/settle.html?type=weekly', {}, callback);
};

//
// Private Functions 
//
Futures796.prototype.getUserInfo = function getUserInfo(callback) 
{
    this.privateRequest('https://796.com/v2/user/get_info', {}, callback);
};

Futures796.prototype.getUserBalance = function getUserBalance(callback) 
{
    this.privateRequest('https://796.com/v2/user/get_balance', {}, callback);
};

Futures796.prototype.getAssets = function getAssets(callback) 
{
    this.privateRequest('https://796.com/v2/user/get_assets', {}, callback);
};

Futures796.prototype.getOrders = function getOrders(callback) 
{
    this.privateRequest('https://796.com/v2/weeklyfutures/orders', {}, callback);
};

Futures796.prototype.getTradeRecords = function getTradeRecords(callback) 
{
    this.privateRequest('https://796.com/v2/weeklyfutures/records', {}, callback);
};

Futures796.prototype.getPositions = function getPositions(callback) 
{
    this.privateRequest('https://796.com/v2/weeklyfutures/position', {}, callback);
};

Futures796.prototype.openBuy = function openBuy(callback, times, buy_num, buy_price, ptype)
{
    var params = {};
    
    if(times) params.times = times;
    if(buy_num) params.buy_num = buy_num;
    if(buy_price) params.buy_price = buy_price;
    if(ptype) params.ptype = ptype;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/open_buy', params, callback); 
};

Futures796.prototype.closeBuy = function closeBuy(callback, times, amount, price, ptype) 
{
    var params = {};
    
    if(times) params.times = times;
    if(ptype) params.ptype = ptype;
    if(amount) params.amount = amount;
    if(price) params.price = price;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/close_buy', params, callback);
};

Futures796.prototype.openSell = function openSell(callback, times, sell_num, sell_price, ptype) 
{
    var params = {};
    
    if(times) params.times = times;
    if(sell_num) params.sell_num = sell_num;
    if(sell_price) params.sell_price = sell_price;
    if(ptype) params.ptype = ptype;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/open_sell', params, callback);
};

Futures796.prototype.closeSell = function closeSell(callback, times, amount, price, ptype)
{
    var params = {};
    
    if(times) params.times = times;
    if(amount) params.amount = amount;
    if(price) params.price = price;
    if(ptype) params.ptype = ptype;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/close_sell', params, callback);
    
};

Futures796.prototype.cancelOrder = function cancelOrder(callback, bs, orderno) 
{
    var params = {};
    
    if(bs) params.bs = bs;
    if(orderno) params.no = orderno;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/cancel_order', params, callback);
};

Futures796.prototype.cancelAll = function cancelAll(callback, bs) 
{
    var params = {};
    if(bs) params.bs = bs;
    
    this.privateRequest('https://796.com/v2/weeklyfutures/cancel_all', params, callback);
};


/**
 * Maps the Futures796 error codes to error message
 * @param  {Integer}  error_code   Futures796 error code
 * @return {String}                error message
 */
function mapErrorMessage(error_code)
{
    var errorCodes = {
       '-1': 'Invalid Request',
       '-2': 'Wrong Request Parameter',
       '-3': 'Verification for signature parameter failed',
       '-4': 'No APPID Request Exists',
       '-5': 'Invalid APPKEY request',
       '-6': 'IP Access Denied',
       '-7': 'Invalid APKey Request',
       '-8': 'Illegal User',
       '-9': 'Account Frozen',
       '-101': 'NO access_token exists',
       '-102': 'Abandoned access_token, please regain',
       '-103': 'Access denied',
       '-10': 'Order-placing Failed',
       '-11': 'Operation Failed',
       '-12': 'Wrong Operation',
       '-13': 'Queue data is in processing',
       '-14': 'Request sent, please do not repeat',
       '-15': 'Illegal Operation',
       '-104': 'Invalid amount',
       '-105': 'Balance Insufficient',
       '-106': 'Invalid Price',
       '-107': 'Amount Insufficient',
       '-108': 'Amount must be more than 0.1',
       '-200': 'Redemption Failed',
       '-201': 'Redemption Failed',
       '-202': 'Wrong BTC Code',
       '-203': 'Wrong BTC Code',
       '-204': 'Wrong BTC Code',
       '-205': 'Wrong BTC Code',
       '-206': 'BTC Code Already Redeemed',       
       '503': 'Too many requests (Http)'
    };

    if (!errorCodes[error_code])
    {
        return 'Unknown Futures796 error code: ' + error_code;
    }

    return( errorCodes[error_code] );
}

module.exports = Futures796;